* Day 7: Amplification Circuit

Based on the navigational maps, you're going to need to send more power to your ship's thrusters to
reach Santa in time. To do this, you'll need to configure a series of amplifiers already installed
on the ship.

There are five amplifiers connected in series; each one receives an input signal and produces an
output signal. They are connected such that the first amplifier's output leads to the second
amplifier's input, the second amplifier's output leads to the third amplifier's input, and so
on. The first amplifier's input value is 0, and the last amplifier's output leads to your ship's
thrusters.

    O-------O  O-------O  O-------O  O-------O  O-------O
0 ->| Amp A |->| Amp B |->| Amp C |->| Amp D |->| Amp E |-> (to thrusters)
    O-------O  O-------O  O-------O  O-------O  O-------O

The Elves have sent you some Amplifier Controller Software (your puzzle input), a program that
should run on your existing Intcode computer. Each amplifier will need to run a copy of the program.

When a copy of the program starts running on an amplifier, it will first use an input instruction to
ask the amplifier for its current phase setting (an integer from 0 to 4). Each phase setting is used
exactly once, but the Elves can't remember which amplifier needs which phase setting.

The program will then call another input instruction to get the amplifier's input signal, compute
the correct output signal, and supply it back to the amplifier with an output instruction. (If the
amplifier has not yet received an input signal, it waits until one arrives.)

Your job is to find the largest output signal that can be sent to the thrusters by trying every
possible combination of phase settings on the amplifiers. Make sure that memory is not shared or
reused between copies of the program.

For example, suppose you want to try the phase setting sequence 3,1,2,4,0, which would mean setting
amplifier A to phase setting 3, amplifier B to setting 1, C to 2, D to 4, and E to 0. Then, you
could determine the output signal that gets sent from amplifier E to the thrusters with the
following steps:
- Start the copy of the amplifier controller software that will run on amplifier A. At its first
  input instruction, provide it the amplifier's phase setting, 3. At its second input instruction,
  provide it the input signal, 0. After some calculations, it will use an output instruction to
  indicate the amplifier's output signal.
- Start the software for amplifier B. Provide it the phase setting (1) and then whatever output
  signal was produced from amplifier A. It will then produce a new output signal destined for
  amplifier C.
- Start the software for amplifier C, provide the phase setting (2) and the value from amplifier B,
  then collect its output signal.
- Run amplifier D's software, provide the phase setting (4) and input value, and collect its output
  signal.
- Run amplifier E's software, provide the phase setting (0) and input value, and collect its output
  signal.

The final output signal from amplifier E would be sent to the thrusters. However, this phase setting
sequence may not have been the best one; another sequence might have sent a higher signal to the
thrusters.

Here are some example programs:
- Max thruster signal 43210 (from phase setting sequence 4,3,2,1,0):
  : 3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0
- Max thruster signal 54321 (from phase setting sequence 0,1,2,3,4):
  : 3,23,3,24,1002,24,10,24,1002,23,-1,23,101,5,23,23,1,24,23,23,4,23,99,0,0
- Max thruster signal 65210 (from phase setting sequence 1,0,4,3,2):
  : 3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0

Try every combination of phase settings on the amplifiers. What is the highest signal that can be
sent to the thrusters?

file:day_07_input.csv
file:thruster_disassembly.rb <- the input code with annotation

file:int_code.rb <- from days 2 & 5

Day 2+5 CLI seems a bit cryptic to use for amplifiers:
: rbenv exec ruby int_code.rb day_07_input.csv
TEST>0
TEST>0
14
8.1001 => 3

file:amplification.rb <- day 7 CLI on top of IntCode

First try with a single set of phases:
: rbenv exec ruby amplification.rb day_07_input.csv
TEST>0
TEST>0
TEST>TEST>TEST>TEST>TEST>TEST>TEST>TEST>19355

After some cleanup:
: rbenv exec ruby amplification.rb day_07_input.csv
19355

More cleanup and tests:
file:spec/amplifier_cascade_spec.rb

Dynamic number of amplifiers with given number of phases
: rbenv exec ruby amplification.rb day_07_input.csv 0
14
: rbenv exec ruby amplification.rb day_07_input.csv 0 1
43
: rbenv exec ruby amplification.rb day_07_input.csv 0 1 2
960
: rbenv exec ruby amplification.rb day_07_input.csv 0 1 2 3
1929
: rbenv exec ruby amplification.rb day_07_input.csv 0 1 2 3 4
19355

: rbenv exec ruby amplification.rb day_07_input.csv 4 3 2 1 0
28889

But that is not "43210" as advertised?
Maybe the given number sequences are other programs, not day_07_input!
: rbenv exec rspec
....................................................................

Finished in 0.35834 seconds (files took 0.13847 seconds to load)
68 examples, 0 failures

Make it run a loop for all possible 5**5 combinations of phases if none given.
...or use GNU Parallel
#+BEGIN_SRC bibtex
@article{Tange2011a,
  title = {GNU Parallel - The Command-Line Power Tool},
  author = {O. Tange},
  address = {Frederiksberg, Denmark},
  journal = {;login: The USENIX Magazine},
  month = {Feb},
  number = {1},
  volume = {36},
  url = {http://www.gnu.org/s/parallel},
  year = {2011},
  pages = {42-47},
  doi = {http://dx.doi.org/10.5281/zenodo.16303}
}
#+END_SRC

: parallel rbenv exec ruby amplification.rb day_07_input.csv ::: 0 1 2 3 4 ::: 0 1 2 3 4 ::: 0 1 2 3 4 ::: 0 1 2 3 4 ::: 0 1 2 3 4 > day_07_output.csv
file:day_07_output.csv

: sort -n day_07_output.csv | head
279
285
291
297
303
309
315
321
327
333
: sort -n day_07_output.csv | tail
5621065
5621400
5628100
5762100
8421065
8421400
8428100
8562100
11242100
16842100

16842100 was deemed too high. 
Maybe they meant that 4,4,4,4,4 is not a valid combination (of unique phases)?

: rbenv exec ruby amplification.rb day_07_input.csv > day_07_output.csv
: cut -d':' -f2 day_07_output.csv | sort -n | head
15493
15499
15525
15595
15639
15655
16833
16839
16945
16975
: cut -d':' -f2 day_07_output.csv | sort -n | tail
43769
43840
44037
44059
44205
44280
44339
44414
45880
46014

46014 was the correct answer!
: [1, 3, 4, 2, 0]:46014

: git add day_07_output.csv spec/amplifier_cascade_spec.rb
: git add -u
: git commit -m'2019 day 7 part 1'

* Part Two

It's no good - in this configuration, the amplifiers can't generate a large enough output signal to
produce the thrust you'll need. The Elves quickly talk you through rewiring the amplifiers into a
feedback loop:

      O-------O  O-------O  O-------O  O-------O  O-------O
0 -+->| Amp A |->| Amp B |->| Amp C |->| Amp D |->| Amp E |-.
   |  O-------O  O-------O  O-------O  O-------O  O-------O |
   |                                                        |
   '--------------------------------------------------------+
                                                            |
                                                            v
                                                     (to thrusters)

Most of the amplifiers are connected as they were before; amplifier A's output is connected to
amplifier B's input, and so on. However, the output from amplifier E is now connected into amplifier
A's input. This creates the feedback loop: the signal will be sent through the amplifiers many
times.

In feedback loop mode, the amplifiers need totally different phase settings: integers from 5 to 9,
again each used exactly once. These settings will cause the Amplifier Controller Software to
repeatedly take input and produce output many times before halting. Provide each amplifier its phase
setting at its first input instruction; all further input/output instructions are for signals.

Don't restart the Amplifier Controller Software on any amplifier during this process. Each one
should continue receiving and sending signals until it halts.

All signals sent or received in this process will be between pairs of amplifiers except the very
first signal and the very last signal. To start the process, a 0 signal is sent to amplifier A's
input exactly once.

Eventually, the software on the amplifiers will halt after they have processed the final loop. When
this happens, the last output signal from amplifier E is sent to the thrusters. Your job is to find
the largest output signal that can be sent to the thrusters using the new phase settings and
feedback loop arrangement.

Here are some example programs:
- Max thruster signal 139629729 (from phase setting sequence 9,8,7,6,5):
  : 3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5
- Max thruster signal 18216 (from phase setting sequence 9,7,8,5,6):
  : 3,52,1001,52,-5,52,3,53,1,52,56,54,1007,54,5,55,1005,55,26,1001,54,
  : -5,54,1105,1,12,1,53,54,53,1008,54,0,55,1001,55,1,55,2,53,55,53,4,
  : 53,1001,56,-1,56,1005,56,6,99,0,0,0,0,10

Try every combination of the new phase settings on the amplifier feedback loop. What is the highest
signal that can be sent to the thrusters?

This requires running the stuff concurrently until finished... and passing additional flag for
activating feedback:
: rbenv exec ruby amplification.rb day_07_input.csv f 1 3 4 2 0
46014
: rbenv exec ruby amplification.rb day_07_input.csv t 1 3 4 2 0
46014

Old stuff still works, not sure if threading OK though.
Probably not:
: rbenv exec rspec
...*.................................................................

Pending: (Failures listed here are expected and do not affect your suite's status)

  1) AmplifierCascade with test program 4 with phases 9,8,7,6,5 outputs 139629729
     # Temporarily skipped with xit
     # ./spec/amplifier_cascade_spec.rb:61


Finished in 0.35345 seconds (files took 0.13942 seconds to load)
69 examples, 0 failures, 1 pending

Some more testing:
file:spec/forked_io_spec.rb

Single thread works just fine:
: bundle exec ruby int_code.rb day_07_input.csv
TEST>5
TEST>0
0
TEST>1
2
TEST>2
4
TEST>3
4
TEST>4
6
TEST>5
10
TEST>6
12
TEST>7
14
TEST>8
10
TEST>9
18

: bundle exec ruby amplification.rb day_07_input.csv t 5 6 7 8 9
0
7
68
553
2226
8912
35658
285270
570549
9128786

The problem was in RSpec: 
- either stdout is not mocked (test uses actual stdout), or
- stdout is set to expect correct kinds of output in correct order
- or else the tests are jammed by waiting "proper" output

: bundle exec rspec
.......................................................................

Finished in 0.31675 seconds (files took 0.18516 seconds to load)
71 examples, 0 failures

The other example too:
: bundle exec rspec
.........................................................................

Finished in 0.3403 seconds (files took 0.16612 seconds to load)
73 examples, 0 failures

Finally:
: bundle exec ruby amplification.rb day_07_input.csv t > day_07_output2.csv
file:day_07_output2.csv

: sort -n -k10 day_07_output2.csv | head
[7, 6, 5, 9, 8]:0, 4, 42, 340, 1376, 5517, 22082, 176676, 353361, 5653777
[7, 6, 9, 5, 8]:0, 4, 42, 340, 1376, 5517, 22082, 176680, 353369, 5653905
[7, 6, 5, 8, 9]:0, 4, 44, 355, 1434, 5750, 23016, 184146, 368301, 5892818
[7, 6, 9, 8, 5]:0, 4, 44, 355, 1434, 5750, 23016, 184152, 368313, 5893010
[7, 5, 6, 9, 8]:0, 5, 46, 374, 1516, 6075, 24310, 194500, 389011, 6224177
[7, 9, 6, 5, 8]:0, 5, 46, 374, 1516, 6075, 24310, 194512, 389034, 6224545
[7, 6, 8, 5, 9]:0, 4, 48, 386, 1556, 6240, 24980, 199858, 399725, 6395604
[7, 6, 8, 9, 5]:0, 4, 48, 386, 1556, 6240, 24980, 199860, 399729, 6395668
[7, 5, 6, 8, 9]:0, 5, 48, 389, 1574, 6308, 25244, 201970, 403951, 6463218
[7, 9, 6, 8, 5]:0, 5, 48, 389, 1574, 6308, 25244, 201984, 403978, 6463650
: sort -n -k10 day_07_output2.csv | tail
[5, 9, 8, 6, 7]:0, 16, 136, 1104, 4434, 17740, 70965, 567730, 1135472, 18167556
[9, 5, 8, 6, 7]:0, 16, 136, 1104, 4434, 17740, 70965, 567738, 1135488, 18167812
[5, 8, 9, 7, 6]:0, 16, 138, 1116, 4480, 17925, 71707, 573664, 1147342, 18357480
[9, 8, 5, 7, 6]:0, 16, 138, 1116, 4480, 17925, 71707, 573676, 1147366, 18357864
[5, 8, 9, 6, 7]:0, 16, 140, 1132, 4542, 18173, 72699, 581598, 1163208, 18611336
[9, 8, 5, 6, 7]:0, 16, 140, 1132, 4542, 18173, 72699, 581610, 1163232, 18611720
[8, 5, 9, 7, 6]:0, 16, 146, 1176, 4716, 18871, 75495, 603968, 1207950, 19327216
[8, 9, 5, 7, 6]:0, 16, 146, 1176, 4716, 18871, 75495, 603972, 1207958, 19327344
[8, 5, 9, 6, 7]:0, 16, 148, 1192, 4778, 19119, 76487, 611902, 1223816, 19581072
[8, 9, 5, 6, 7]:0, 16, 148, 1192, 4778, 19119, 76487, 611906, 1223824, 19581200

19581200 is the correct answer!
